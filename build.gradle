plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

repositories {
    mavenLocal()
}

base {
    archivesName = project.archives_base_name
}

fabricApi {
    configureDataGeneration()
}

loom {
    accessWidenerPath = file("src/main/resources/${project.archives_base_name}.accesswidener")

    splitEnvironmentSourceSets()

    mods {
        "${project.archives_base_name}" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }

    runs {
        datagen {
            inherit client
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    inputs.property "api_version", project.fabric_versiononly
    inputs.property "java_version", project.java_version

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version,
                "api_version": project.fabric_versiononly,
                "java_version": project.java_version
    }

    filesMatching("${project.archives_base_name}.mixins.json") {
        expand "java_version": project.java_version
    }
}

processClientResources {
    inputs.property "java_version", project.java_version

    filesMatching("${project.archives_base_name}.client.mixins.json") {
        expand "java_version": project.java_version
    }
}

def targetJavaVersion = project.java_version as Integer

tasks.withType(JavaCompile).configureEach {
    it.options.release.set(targetJavaVersion)
}

task.register("cacheToMavenLocal", Sync) {
    from new File(gradle.gradleUserHomeDir, 'caches/modules-2/files-2.1')
    into "${rootDir}/local-m2"

    // Last copy target wins
    duplicatesStrategy = 'include'

    eachFile {
        List<String> parts = it.path.split('/')
        // Construct a maven repo file tree from the path
        it.path = parts[0].replace('.','/') +
            '/' + parts[1] +
            '/' + parts[2] +
            '/' + parts[4]
    }

    includeEmptyDirs false
}

java {
    withSourcesJar()

    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}"}
    }
}

publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    repositories {
        mavenLocal()
    }
}
